@page "/ProjectTasks"
@using TaskManager.Data.Models
@inject TaskManager.Data.TaskManagerDbContext Db
@inject NavigationManager Navigation




<h3>ProjectTasks</h3>

@if (_selectedProject != null)
{
    <div class="container mt-3">
        <h4>Tareas de @_selectedProject.Name</h4>
        @foreach (var sec in Db.Sections.Where(s => s.ProjectId == _selectedProject.Id))
        {
            <div class="mb-3">
                <h5>@sec.Name</h5>
                <ul class="list-group">
                    @foreach (var task in Db.Tasks.Where(t => t.SectionId == sec.Id))
                    {
                        <li class="list-group-item">
                            <b>@task.Title</b> <span class="badge bg-info">@task.Priority</span> <span class="badge bg-warning">@task.Urgency</span>
                            <div>@task.Description</div>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
}


@code {
    // Eliminar duplicados y limpiar ambigüedades
    private bool collapseNavMenu = true;
    //private Workspace? _selectedWorkspace;
    private HashSet<int> _expandedFolders = new();
    private Project? _selectedProject;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    //private void SelectWorkspace(Workspace ws)
    //{
        //_selectedWorkspace = ws;
        //_expandedFolders.Clear();
    //}

    private void ToggleFolder(int folderId)
    {
        if (_expandedFolders.Contains(folderId))
            _expandedFolders.Remove(folderId);
        else
            _expandedFolders.Add(folderId);
    }

    private void SelectProject(Project project)
    {
        _selectedProject = project;
        StateHasChanged();
    }
}

