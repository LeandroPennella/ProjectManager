@page "/workspaces"
@using TaskManager.Data.Models
@inject TaskManager.Data.TaskManagerDbContext Db
@inject NavigationManager Navigation

<h3>Workspaces</h3>

<div class="mb-3">
    <input @bind="newWorkspaceName" placeholder="Nuevo Workspace" class="form-control" />
    <button class="btn btn-primary mt-2" @onclick="AddWorkspace">Agregar Workspace</button>
</div>

@if (workspaces is null)
{
    <p>Cargando...</p>
}
else if (!workspaces.Any())
{
    <p>No hay workspaces.</p>
}
else
{
    <ul class="list-group">
        @foreach (var ws in workspaces)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span @onclick="() => GoToFolders(ws.Id)" style="cursor:pointer;">@ws.Name</span>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteWorkspace(ws.Id)">Eliminar</button>
            </li>
        }
    </ul>
}

@code {
    private List<Workspace> workspaces = new();
    private string newWorkspaceName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        workspaces = Db.Workspaces.ToList();
    }

    private void AddWorkspace()
    {
        if (!string.IsNullOrWhiteSpace(newWorkspaceName))
        {
            var ws = new Workspace { Name = newWorkspaceName };
            Db.Workspaces.Add(ws);
            Db.SaveChanges();
            workspaces.Add(ws);
            newWorkspaceName = string.Empty;
        }
    }

    private void DeleteWorkspace(int id)
    {
        var ws = Db.Workspaces.Find(id);
        if (ws != null)
        {
            Db.Workspaces.Remove(ws);
            Db.SaveChanges();
            workspaces.Remove(ws);
        }
    }

    private void GoToFolders(int workspaceId)
    {
        Navigation.NavigateTo($"/folders/{workspaceId}");
    }
}
