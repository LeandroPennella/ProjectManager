@using TaskManager.Data.Models
@inject TaskManager.Data.TaskManagerDbContext Db

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@(_selectedWorkspace?.Name ?? "TaskManager")</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="flex-column">
        @if (_selectedWorkspace == null)
        {
            @foreach (var ws in Db.Workspaces.ToList())
            {
                <div class="nav-item px-3">
                    <a class="nav-link" href="#" @onclick:stopPropagation @onclick:preventDefault @onclick="() => SelectWorkspace(ws)">@ws.Name</a>
                </div>
            }
        }
        else
        {
            @foreach (var folder in Db.Folders.Where(f => f.WorkspaceId == _selectedWorkspace.Id))
            {
                <div class="nav-item px-3">
                    <button class="btn btn-link w-100 text-start" @onclick="() => ToggleFolder(folder.Id)">
                        <span class="oi oi-folder me-1"></span>@folder.Name
                        <span class="float-end">@(_expandedFolders.Contains(folder.Id) ? "▼" : "►")</span>
                    </button>
                    @if (_expandedFolders.Contains(folder.Id))
                    {
                        <div class="ms-4">
                            @foreach (var project in Db.Projects.Where(p => p.FolderId == folder.Id))
                            {
                                <div class="nav-item px-2">
                                    <span class="oi oi-briefcase me-1"></span>@project.Name
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </nav>
</div>

@code {
    // Eliminar duplicados y limpiar ambigüedades
    private bool collapseNavMenu = true;
    private Workspace? _selectedWorkspace;
    private HashSet<int> _expandedFolders = new();

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void SelectWorkspace(Workspace ws)
    {
        _selectedWorkspace = ws;
        _expandedFolders.Clear();
    }

    private void ToggleFolder(int folderId)
    {
        if (_expandedFolders.Contains(folderId))
            _expandedFolders.Remove(folderId);
        else
            _expandedFolders.Add(folderId);
    }
}
